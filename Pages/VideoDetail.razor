@page "/video-detail"
@using static SpeechRecognitionApp.Pages.YouTubeSearch
@using static SpeechRecognitionApp.Pages.TextReader
@inject HttpClient Http

@if(videos != null){
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h2>videos.Title</h2>
                </div>
                <hr>
                <div class="card-body">
                    <div class="container">
                        <iframe width="560" height="315" src="https://www.youtube.com/embed/@videos.VideoId?rel=0" 
                            frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen></iframe>
                    </div>
                </div>
                <hr>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <p><strong>Published at:</strong> @videos.PublishedAt</p>
                        </div>
                        <div class="col">
                            <p><strong>Channel: </strong> @videos.ChannelTitle</p>
                        </div>
                    </div>
                    <hr>
                    <div class="container">
                        <p><strong>Description:</strong> <i>@videos.Description</i></p>
                    </div>
                </div>
            </div>
            <hr>
            @if (generatedTextFeatures != null){
                <div class="card-header">
                    <h3>Generated Text: </h3><br> <p><i>@generatedTextFeatures.Text</i></p> | <a href="http://localhost:5082/api/TextToSpeechApi/text-to-speech?text=@generatedTextFeatures.Text" class="text-dark">Speak</a>
                </div>
                <div class="row">
                    <div class="col-md-4">                    
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead class="table text-white">
                                    <tr>
                                        <th>Text</th>
                                        <th>Label</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var item in generatedTextFeatures?.Entities?.Distinct() ?? new List<Entity>()){
                                        <tr>
                                            <td>@item.Text</td>
                                            <td>@item.Label</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="col">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead class="table text-white">
                                    <tr>
                                        <th>Sentence</th>
                                        <th>Positive</th>
                                        <th>Negative</th>
                                        <th>Neutral</th>
                                        <th>Compound</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var item in generatedTextFeatures?.Sentiments ?? new List<Sentiment>()) {
                                        <tr>
                                            <td><p id="sentence">@item.Sentence</p></td>
                                            <td style="color: blue;">@item.Positive</td>
                                            <td style="color: black;">@item.Negative</td>
                                            <td style="color: green;">@item.Neutral</td>
                                            <td style="color: rgb(255, 49, 84);">@item.Compound</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            <hr>            
            <div class="form-group">
                <label for="SearchString">Search String</label>
                <input type="text" @bind="SearchString" autocomplete="off" spellcheck="false" class="form-control-plaintext" />
            </div>
            <hr>
            <div class="form-group">
                <button class="form-control-plaintext btn-sm bg-dark text-white" @onclick="SearchLlmTextGenerations">Search Prompts</button>
            </div>
            <hr>
            @if (llmTextGenerations.Count > 0){
                <div class="card-header">
                    <h3>Search Llm Text Generations</h3>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead class="table text-white">
                            <tr>
                                <th>Title</th>
                                <th>Actor</th>
                                <th>Generated Text</th>
                                <th>Created AT</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var item in llmTextGenerations ?? new List<LlmTextGeneration>()){
                                <tr>
                                    <td>@item.Title</td>
                                    <td>@item.Actor</td>
                                    <td>@item.GeneratedText</td>
                                    <td>@item.CreatedAT</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="SearchString">SearchString</label>
                <input type="text" @bind="videoId" autocomplete="off" spellcheck="false" class="form-control-plaintext" />
            </div>
            <hr>
            <div class="form-group">
                <button class="form-control-plaintext btn-sm bg-dark text-white" @onclick="DisplaySavedYouTubeVideoDetail">Display</button>
            </div>
            <hr>
            <div class="card-header">
                <h3>Text Display:</h3>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="CurrentSentence">Text</label>
                    <input
                        style="font-weight: bolder; font-family: 'Cascadia Code', monospace; font-weight: bold; color: black; text-align: justify; font-size: larger; background-color: whitesmoke;" 
                        type="text" @bind="CurrentSentence" class="form-control-plaintext" spellcheck="false" autocomplete="off" id="currentSentenceInput">
                </div>
                <hr>
                <div class="form-group">
                    <label for="Response">Response</label>
                    <input type="text" @oninput="OnResponseChanged" class="form-control-plaintext" spellcheck="false" autocomplete="off">
                </div>
                <hr>
                <div class="row">                    
                    <div class="row">
                        <div class="col">
                             <div class="form-group">
                                <label for="Role">Role</label>
                                <input type="text" @oninput="OnRoleChanged" class="form-control-plaintext" spellcheck="false" autocomplete="off">
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <button class="btn bg-dark text-white form-control-plaintext btn-sm" @onclick="GenerateTextSentiments">Generate</button>
                            </div>
                        </div>
                    </div>
                </div>              
            </div>

        </div>
    </div>
} else {
    <p>Video details not available.</p>
}

@code{
    @* VideoDetails *@
    private GeneratedTextFeatures generatedTextFeatures = new();
    private string CurrentSentence {get;set;} = string.Empty;
    private string Role {get;set;} = string.Empty;
    private string Response {get;set;} = string.Empty;
    private string SearchString {get;set;} = string.Empty;

    public string? videoId {get;set;}
    private QueryResult? videos = new();
    private List<LlmTextGeneration> llmTextGenerations = new();

    private void OnRoleChanged(ChangeEventArgs e)
    {
        Role = e.Value?.ToString() ?? string.Empty;
    }

    private void OnResponseChanged(ChangeEventArgs e)
    {
        Response = e.Value?.ToString() ?? string.Empty;
    }
    private async Task DisplaySavedYouTubeVideoDetail(){
        if(!string.IsNullOrWhiteSpace(videoId)){
            try{
                videos = await Http.GetFromJsonAsync<QueryResult>($"http://localhost:5082/api/YouTubeApiSearch/GetVideoDetails?videoId={videoId}");
            } catch(Exception ex){
                Console.WriteLine(ex.Message);
            }
        }
    }
    private async Task GenerateTextSentiments(){
        if (!string.IsNullOrWhiteSpace(CurrentSentence) || 
                !string.IsNullOrWhiteSpace(Role) || 
            !string.IsNullOrWhiteSpace(Response)) {
            try{
                generatedTextFeatures = await Http.GetFromJsonAsync<GeneratedTextFeatures>($"http://localhost:5082/api/TextGeneration/generate-text-without-translation?text={Uri.EscapeDataString(CurrentSentence)}&actor={Uri.EscapeDataString(Role)}&response={Uri.EscapeDataString(Response)}");
            } catch (Exception ex){
                Console.WriteLine($"Error: {ex.Message}");
            }    
        }
    }

    private async Task SearchLlmTextGenerations(){
        if (!string.IsNullOrWhiteSpace(SearchString)) {
            try{                
                llmTextGenerations = await Http.GetFromJsonAsync<List<LlmTextGeneration>>($"http://localhost:5082/api/TextGeneration/search-llm-text-generations?search={Uri.EscapeDataString(SearchString)}");
            } catch (Exception ex){
                Console.WriteLine($"Error: {ex.Message}");
            }    
        }
    }

    public class LlmTextGeneration {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Text { get; set; }
        public string? Actor { get; set; }
        public string? Response { get; set; }
        public string? GeneratedText { get; set; }
        public string? CreatedAT { get; set; }
    }
}